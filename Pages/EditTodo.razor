@page "/todo/edit/{Id}"

<!-- Importation des espaces de noms et injection des dépendances -->
@using TodoListMauiApp.Models
@using TodoListMauiApp.Services
@inject ITodoService TodoService
@inject NavigationManager Navigation

<h3>Edit Todo</h3>

<!-- Vérifie si la tâche (todo) existe -->
@if (Todo != null)
{
    <!-- Utilisation d'un formulaire de modification (EditForm) -->
    <EditForm Model="@Todo" OnValidSubmit="@this.HandleValidSubmit">
        <DataAnnotationsValidator />
        <div>
            <label for="Name">Nom:</label>
            <!-- Utilisation d'un champ de texte lié bidirectionnellement à la propriété "Name" de la tâche -->
            <InputText id="Name" @bind-Value="@Todo.Name" />
            <!-- Affiche un message de validation pour la propriété "Name" si nécessaire -->
            <ValidationMessage For="@(() => this.Todo.Name)" />
        </div>
        <div>
            <label for="Description">Description:</label>
            <!-- Utilisation d'un champ de texte lié bidirectionnellement à la propriété "Description" de la tâche -->
            <InputText id="Description" @bind-Value="@Todo.Description" />
            <!-- Affiche un message de validation pour la propriété "Description" si nécessaire -->
            <ValidationMessage For="@(() => this.Todo.Description)" />
        </div>
        <!-- Bouton de soumission du formulaire -->
        <button type="submit">Modifier</button>
    </EditForm>
    <!-- Lien de retour à la liste des tâches -->
    <p><a href="/fetchdata">Revenir à la liste</a></p>
}
else
{
    <!-- Affiche un message si la tâche n'est pas trouvée -->
    <p>Non trouvé !</p>
}

@code
{
    // Déclaration d'un paramètre de page pour l'identifiant de la tâche
    [Parameter]
    public string Id { get; set; }

    // Déclaration d'une variable privée pour stocker la tâche à éditer
    private TodoModel Todo;
    // Méthode appelée lors de l'initialisation de la page
    protected override async Task OnInitializedAsync()
    {
        // Convertir la chaîne Id en entier si nécessaire
        if (int.TryParse(Id, out int todoId))
        {
            // Récupérer la tâche à éditer à partir du service TodoService
            Todo = await TodoService.GetTodoByIdAsync(todoId);
        }
    }

    // Méthode appelée lors de la soumission réussie du formulaire
    private async Task HandleValidSubmit()
    {
        // Mettre à jour la tâche à l'aide du service TodoService
        await TodoService.UpdateTodoAsync(Todo);
        // Naviguer vers la liste des tâches après la mise à jour
        Navigation.NavigateTo("/fetchdata");
    }
}