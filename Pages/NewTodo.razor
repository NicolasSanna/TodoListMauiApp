@page "/todo/new"

<!-- Importation des espaces de noms et injection des dépendances -->
@using TodoListMauiApp.Models
@using TodoListMauiApp.Services
@inject ITodoService TodoService
@inject NavigationManager Navigation

<!-- Affichage du titre de la page -->
<h3>Créer une nouvelle tâche</h3>
<p>Affichage dynamique : @dynamicName</p>
<!-- Formulaire d'édition avec liaison aux propriétés du nouveau todo -->
<EditForm Model="@Todo" OnValidSubmit="@this.HandleValidSubmit">
    <!-- Validation basée sur les annotations de données -->
    <DataAnnotationsValidator />

    <!-- Champ pour le nom du nouveau todo -->
    <div>
        <label for="Name">Name:</label>
        <!-- On écoute l'événement quand on commence à mettre du texte avec oninput' -->
        <InputText id="Name" @bind-Value="Todo.Name" @oninput="@this.UpdateName" />
        <!-- Affichage des messages de validation pour le champ Name -->
        <ValidationMessage For="@(() => this.Todo.Name)" />
    </div>

    <!-- Champ pour la description du nouveau todo -->
    <div>
        <label for="Description">Description:</label>
        <InputText id="Description" @bind-Value="@Todo.Description" />
        <!-- Affichage des messages de validation pour le champ Description -->
        <ValidationMessage For="@(() => this.Todo.Description)" />
    </div>

    <!-- Bouton de soumission du formulaire -->
    <div>
        <button type="submit">Ajouter</button>
    </div>
</EditForm>

<!-- Affichage du message d'erreur s'il y a une erreur -->
@if (!string.IsNullOrEmpty(errorMessage))
{
    <p style="color: red;">@errorMessage</p>
}

<!-- Lien pour revenir à la liste des tâches -->
<p><a href="fetchdata">Revenir à la liste</a></p>

@code
{
    // Déclaration d'une instance de TodoModel pour le nouveau todo
    private TodoModel Todo = new TodoModel();
    // Déclaration d'une variable pour stocker le message d'erreur
    private string errorMessage = string.Empty;

    private string dynamicName = "";

    // Méthode appelée lors de la soumission valide du formulaire
    private async Task HandleValidSubmit()
    {
        // Vérification si les champs obligatoires sont vides ou blancs
        if (string.IsNullOrWhiteSpace(this.Todo.Name) || string.IsNullOrWhiteSpace(this.Todo.Description))
        {
            // Définition du message d'erreur si les champs sont vides
            this.errorMessage = "Le nom et la description sont requis";
            return;
        }

        try
        {
            // Tentative d'ajouter le nouveau todo en utilisant le service TodoService
            await this.TodoService.AddTodoAsync(this.Todo);
            // Redirection vers la liste des tâches après l'ajout réussi
            Navigation.NavigateTo("/fetchdata");
        }
        catch (Exception ex)
        {
            // En cas d'erreur lors de l'ajout du todo, définissez le message d'erreur approprié
            this.errorMessage = $"An error occurred: {ex.Message}";
        }
    }

    // Affichage dynamique des propriétés de Name
    private void UpdateName(ChangeEventArgs e)
    {
        this.dynamicName = e.Value.ToString();
    }
}