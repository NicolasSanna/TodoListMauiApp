@page "/fetchdata"

<!-- Importation des espaces de noms et injection des dépendances -->
@using TodoListMauiApp.Services
@using TodoListMauiApp.Models;
@inject ITodoService TodoService
@inject NavigationManager Navigation

<!-- Affichage du titre de la page -->
<h1>Todo List</h1>

<!-- Lien pour ajouter une nouvelle tâche -->
<p><a href="todo/new">Ajouter une nouvelle tâche</a></p>

@if (ShowModal)
{
    <div class="modal fade show d-flex align-items-center" tabindex="-1" role="dialog" style="display: block;">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Supprimer la Todo</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="(() => ShowModal = false)"></button>
                </div>
                <div class="modal-body">
                    <p>Voulez-vous supprimer cette Todo ?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" @onclick="HandleYesClick">Oui</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="(() => ShowModal = false)">Non</button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Vérification si la liste de tâches (todos) n'est pas null -->
@if (Todos != null)
{
    <!-- Affichage d'un tableau pour la présentation des tâches -->
    <p>Il y a @CountTodos Todo(s)</p>
    <table class="table">
        <!-- En-tête du tableau -->
        <thead>
            <tr>
                <th>Nom</th>
                <th>Description</th>
                <th></th>
            </tr>
        </thead>
        <!-- Corps du tableau avec les données des tâches -->
        <tbody>
            <!-- Boucle pour chaque tâche dans la liste -->
            @foreach (var todo in Todos)
            {
                <tr>
                    <!-- Affichage des colonnes Name et Description de la tâche -->
                    <td>@todo.Name</td>
                    <td>@todo.Description</td>
                    <!-- Colonne pour les boutons d'action (View, Edit, Delete) -->
                    <td>
                        <!-- Bouton pour visualiser la tâche -->
                        <button class="btn btn-primary" @onclick="@(() => ViewTodoAsync(todo.Id))">Voir</button>
                        <!-- Bouton pour modifier la tâche -->
                        <button class="btn btn-warning" @onclick="@(() => UpdateTodoAsync(todo.Id))">Éditer</button>
                        <!-- Bouton pour supprimer la tâche -->
                        <button class="btn btn-danger" @onclick="@(() => HandleDeleteButtonClick(todo.Id))">Supprimer</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <!-- Affichage d'un message si la liste de tâches est null -->
    <p>Chargement...</p>
}

@code
{
    // Déclaration d'une variable pour stocker la liste de tâches
    private List<TodoModel> Todos;
    private int CountTodos = 0;
    private bool ShowModal = false;
    private int todoToDelete = 0;

    // Méthode appelée lors de l'initialisation de la page
    protected override async Task OnInitializedAsync()
    {
        // Récupération de la liste de tâches à partir du service TodoService
        this.Todos = await TodoService.GetAllTodosAsync();
        this.CountTodos = Todos.Count();
    }

    // Méthode pour supprimer une tâche
    private async Task DeleteTodoAsync(int todoId)
    {
        // Récupération de la tâche à supprimer à partir de l'ID
        var todoToDelete = await TodoService.GetTodoByIdAsync(todoId);
        // Vérification si la tâche à supprimer existe
        if (todoToDelete != null)
        {
            // Appel du service pour supprimer la tâche
            await TodoService.DeleteTodoAsync(todoToDelete);
            // Actualisation de la liste de tâches après la suppression
            this.Todos = await TodoService.GetAllTodosAsync();
            this.CountTodos = Todos.Count();
        }
    }

    private void HandleDeleteButtonClick(int todoId)
    {
        this.todoToDelete = todoId;
        this.ShowModal = true;
    }

    // Méthode pour rediriger vers la page de modification d'une tâche
    private void UpdateTodoAsync(int todoId)
    {
        // Navigation vers la page d'édition avec l'ID de la tâche
        Navigation.NavigateTo($"/todo/edit/{todoId}");
        // Autres opérations si nécessaires
    }

    // Méthode pour rediriger vers la page de visualisation d'une tâche
    private void ViewTodoAsync(int todoId)
    {
        // Navigation vers la page de visualisation avec l'ID de la tâche
        Navigation.NavigateTo($"/todo/{todoId}");
    }

    private async Task HandleYesClick()
    {
        // Appel de la méthode de suppression avec l'ID de la tâche
        await this.DeleteTodoAsync(todoToDelete);
        this.ShowModal = false;
    }
}